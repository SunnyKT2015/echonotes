import streamlit as st
from pathlib import Path
import whisper

# ----------------------------
# 🔹 Page Setup (must be first!)
# ----------------------------
st.set_page_config(page_title="Lecture Voice → Notes", layout="centered")

# ----------------------------
# 🔹 Custom CSS for Better UI
# ----------------------------
st.markdown("""
    <style>
    .stButton>button {
        background-color: #4CAF50;
        color: white;
        border-radius: 10px;
        height: 45px;
        font-size: 16px;
    }
    .stButton>button:hover {
        background-color: #45a049;
        color: white;
    }
    .header-with-button {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 10px;
    }
    h1, h2 {
        color: #2E86C1;
    }
    </style>
""", unsafe_allow_html=True)



# ----------------------------
# 🔹 Page Heading
# ----------------------------
st.title("🎙️ EchoNotes")
st.write("A Lecture Voice to Notes Generator . Upload your lecture audio/video, generate transcript, summarize key points, create memory tricks, and download the results.")

# ----------------------------
# 🔹 Directories
# ----------------------------
BASE_DIR = Path(__file__).parent
UPLOADS_DIR = BASE_DIR / "uploads"
OUTPUTS_DIR = BASE_DIR / "outputs"
UPLOADS_DIR.mkdir(exist_ok=True)
OUTPUTS_DIR.mkdir(exist_ok=True)


from utils.speech_to_text import transcribe_audio

from utils.summarizer import summarize_text

from utils.mnemonic import generate_mnemonic

from utils.downloads import get_text_file, get_pdf_file

# ----------------------------
# 🔹 Session State
# ----------------------------
if "transcript" not in st.session_state: st.session_state["transcript"] = ""
if "summary" not in st.session_state: st.session_state["summary"] = ""
if "topics" not in st.session_state: st.session_state["topics"] = []
if "mnemonic" not in st.session_state: st.session_state["mnemonic"] = ""

# ----------------------------
# 📂 Upload Section
# ----------------------------
st.header("📂 Upload Lecture")
uploaded = st.file_uploader("Upload audio or video", type=["mp3","wav","m4a","mp4","mov","mkv"])

if uploaded:
    st.success(f"Uploaded: {uploaded.name}")
    st.audio(uploaded)

    if st.button("Generate Transcript"):
        with st.spinner("Transcribing..."):
            transcript = transcribe_audio(uploaded)
            st.session_state["transcript"] = transcript
        st.success("Transcript generated ✅")


    if st.session_state["transcript"]:
        with st.expander("📜 Full Transcript"):
            st.text_area("Transcript", st.session_state["transcript"], height=300)

st.markdown("---")  # divider

# ----------------------------
# 📝 Summary Section
# ----------------------------
st.markdown('<div class="header-with-button"><h2>📝 Summary</h2>', unsafe_allow_html=True)
if st.button("Summarize Notes", key="summarize_btn"):
    if "transcript" not in st.session_state or not st.session_state["transcript"]:
        st.warning("Please upload and transcribe first.")
    else:
        overview, keypoints, topics = summarize_text(st.session_state["transcript"])
        st.session_state["summary"] = overview
        st.session_state["keypoints"] = keypoints
        st.session_state["topics"] = topics
        st.success("Summary generated ✅")

    if "summary" in st.session_state:
        st.subheader("📘 Overview")
        st.write(st.session_state["summary"])

    if "keypoints" in st.session_state:
        st.subheader("🔑 Key Points")
        st.markdown(st.session_state["keypoints"])

    if "topics" in st.session_state:
        st.subheader("📌 Topics")
        st.write(", ".join(st.session_state["topics"]))


st.markdown("---")

# ----------------------------
# 🧠 Mnemonic Section
# ----------------------------
# --- Mnemonic Section ---
# --- Mnemonic Section ---
st.markdown('<div class="header-with-button"><h2>🔑 Mnemonic</h2>', unsafe_allow_html=True)

if st.button("Generate Mnemonic", key="mnemonic_btn"):
    if "topics" not in st.session_state or not st.session_state["topics"]:
        st.warning("Please summarize first to generate topics.")
    else:
        mnemonic_data = generate_mnemonic(st.session_state["topics"])
        st.session_state["mnemonic"] = mnemonic_data
        st.success("Mnemonic generated ✅")

    # Display Mnemonic
    if "mnemonic" in st.session_state:
        data = st.session_state["mnemonic"]

        if isinstance(data, dict):
            st.markdown(f"**Acronym:** {data['acronym']}")
            st.markdown(f"**Mnemonic Sentence:** {data['phrase']}")
        else:
            st.markdown(f"**Mnemonic:** {data}")  # fallback if string

st.markdown("---")


# ----------------------------
# 📥 Download Section
# ----------------------------
# --- Download Section ---
st.markdown('<div class="header-with-button"><h2>⬇️ Download Notes</h2>', unsafe_allow_html=True)

if st.session_state.get("transcript") or st.session_state.get("summary"):
    transcript = st.session_state.get("transcript", "")
    summary = st.session_state.get("summary", "")
    topics = st.session_state.get("topics", [])
    mnemonic_data = st.session_state.get("mnemonic", {"phrase": ""})
    if isinstance(mnemonic_data, dict):
        mnemonic = mnemonic_data.get("phrase", "")
    else:
        mnemonic = mnemonic_data  # already a string

    # Transcript download
    st.download_button("📜 Download Transcript", data=transcript.encode("utf-8"),
                       file_name="transcript.txt", mime="text/plain")

    # Notes as TXT
    txt_file = get_text_file(transcript,summary,st.session_state.get("keypoints", ""),topics,mnemonic)
    

    st.download_button("📝 Download Notes (TXT)", data=txt_file,
                       file_name="notes.txt", mime="text/plain")

    # Notes as PDF
    pdf_file = get_pdf_file(transcript,summary,st.session_state.get("keypoints", ""),topics, mnemonic)

    st.download_button("📄 Download Notes (PDF)", data=pdf_file,
                       file_name="notes.pdf", mime="application/pdf")
else:
    st.info("Generate transcript and summary first to enable downloads.")


st.markdown("---")
st.markdown("### 📖 About This Project")
st.write("""
**Lecture Voice → Notes** automatically converts recorded lectures into structured notes.

**Features:**
- 🎙 Converts audio/video to transcript using Whisper
- 🧠 Summarizes long lectures into key concepts
- 💡 Generates mnemonic tricks for easy memory
- 📄 Exports notes in TXT and PDF formats

""")
